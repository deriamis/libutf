#!/usr/bin/env perl
# The MIT License (MIT)
#
# Copyright © 2022 Ryan Egesdahl
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the “Software”), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# SPDX-FileCopyrightText: 2020 Ryan Egesdahl
# SPDX-License-Identifier: MIT

use v5.14;

use strict;
use warnings FATAL => qw(all);
use English qw( -no_match_vars );

use mro         qw( c3 );
use feature     qw();
use IO::File    qw();
use IO::Handle  qw();
use Carp        qw( carp croak );
use sigtrap     qw( handler signal_handler normal-signals );

use File::Fetch;
use Getopt::Std;
use Pod::Text;
use Pod::Perldoc::ToText;
use Pod::Usage;
use Safe;

my $compartment = new Safe;
$compartment->permit(qw(divide));

use constant {
    ALPHA => "alphabetic",
    CNTRL => "control",
    SPACE => "space",
    BLANK => "blank",
    DIGIT => "digit",
    NUMBR => "numeric",
    INTGR => "integer",
    LOWER => "lowercase",
    UPPER => "uppercase",
    TITLE => "titlecase",
    PUNCT => "punctuation",
    PRINT => "printable",
    CRNCY => "currency",
    MATHS => "mathematic",
    SYMBL => "symbol",
};

$Getopt::Std::STANDARD_HELP_VERSION = 1;
our $VERSION = "1.0";

my $temp_dir = $ENV{TEMPDIR} || $ENV{TMPDIR} || '/tmp';
my $ucd_file = "";
my $download_success = 0;

my %options=();
getopts("ht:v:", \%options);

sub help {
    if (@_) {
        @ARGV = @_;
    } else {
        @ARGV = ( '-F', $0 );
    }

    Pod::Perldoc->run() || 0;
}

sub HELP_MESSAGE {
    my $parser = Pod::Text->new(sentence => 1, width => 78);
    $parser->parse_from_file($0);
}

sub VERSION_MESSAGE {
    say "\nVersion $VERSION\n";
}

sub abort {
    HELP_MESSAGE();
    exit(1);
}

sub cleanup {
    if ($download_success && -e $ucd_file) {
        unlink $ucd_file;
    }
}

sub signal_handler {
    cleanup();
}

sub gen_range_arr {
    my ($name, $list, $cases, $case_name) = @_;

    my $laces = [];
    my $ranges = [];

    for my $code (@$list) {

    }
}

if (defined $options{h}) {
    HELP_MESSAGE();
    exit(0);
}

if (defined $options{t}) {
    if (! -d $options{t}) {
        croak "Temporary directory $options{t} does not exist";
    }
    $temp_dir = $options{t};
}

if (!defined $options{v}) {
    pod2usage(-output => \*STDERR, -exitval => 1);
}

my $remote_path = "Public";
my $remote_file;
if ($options{v} ne "latest") {
    my ($ucd_version, $ucd_revision) = $options{v} =~ /^(\d+\.\d+(?:\.\d+))(.*)$/;
    my $ucd_long_version = $ucd_version . $ucd_revision;
    $remote_path .= "/${ucd_version}/ucd";
    $remote_file = "UnicodeData-${ucd_long_version}.txt";
} else {
    $remote_path .= "/UCD/latest/ucd";
    $remote_file = "UnicodeData.txt";
}

my $url = "https://unicode.org/${remote_path}/${remote_file}";
my $ff = File::Fetch->new(uri => $url);

if (!$ff) {
    croak "Unknown error downloading from $url";
}

say "Downloading $url ...";
$ucd_file = $ff->fetch(to => $temp_dir);
if (!$ucd_file) {
    croak "Error downloading from $url: " . $ff->error(1);
} else {
    $download_success = 1;
}

my $ucd = [];

my $is_range = 0;
my $last_entry = undef;

open my $fh, '<', $ucd_file or croak "Failed to read $ucd_file: $!";
while (my $line = <$fh>) {
    chomp $line;
    $line =~ s/\s*#.*//;

    # Ref: https://www.unicode.org/reports/tr44/#UnicodeData.txt
    my ($code, $name, $category, $comb_class, $bidi_class, $decomp_map,
        $dec_value, $digit_value, $num_value, $bidi_mirrored, undef,
        undef, $uc_mapping, $lc_mapping, $tc_mapping) = split(';', $line);

    $code = hex($code);

    my $char_classes = [];
    my $value = undef;
    my $case_map = {
        upper => undef,
        lower => undef,
        title => undef,
    };

    if ($is_range) {
        if ($name =~ /^<.*, Last>$/) {
            $last_entry->{range}{end} = $code;
            $is_range = 0;
        }
    } else {
        if ($name =~ /^<.*, First>$/) {
            $name =~ s/^<(.*), First>$/<$1>/;
            $is_range = 1;
        } else {
            $is_range = 0;
        }

       if ($category =~ /^(?:C.?|Z(?:l|p))$/) {
            # Don't classify internal UTF control codes
            if ($category =~ /^(?:C(?:c|f|s)|Z)$/) {
                push @$char_classes, CNTRL;
            }

            # Per the C standard
            if ($code == 9) {
                push @$char_classes, BLANK;
            }

            # Per the C standard
            if ($code >= 9 && $code <= 13) {
                push @$char_classes, SPACE;
            }

        } else {
            push @$char_classes, PRINT;

            if ($bidi_class =~ /^E(?:S|T)$/) {
                # (W)hite(S)pace, (S)pace, or (B)lank
                push @$char_classes, PUNCT;
            }

            if ($bidi_class =~ /^(?:(?:W?S)|B)$/) {
                # (W)hite(S)pace, (S)pace, or (B)lank
                push @$char_classes, SPACE;
                push @$char_classes, BLANK;
            }

            if ($category =~ /^Z/) {
                if ($category eq "Zs") {
                    push @$char_classes, SPACE;
                }
                push @$char_classes, BLANK;

            } elsif ($category =~ /^L/) {
               push @$char_classes, ALPHA;

               if ($category eq "Lu") {
                   push @$char_classes, UPPER;
                   $case_map->{lower} = ($lc_mapping ne '') ? $lc_mapping : $code;
                   $case_map->{title} = ($tc_mapping ne '') ? $tc_mapping : $code;
               } elsif ($category eq "Ll") {
                   push @$char_classes, LOWER;
                   $case_map->{upper} = ($uc_mapping ne '') ? $uc_mapping : $code;
                   $case_map->{title} = ($tc_mapping ne '') ? $tc_mapping : $code;
               } elsif ($category eq "Lt") {
                   push @$char_classes, TITLE;
                   $case_map->{lower} = ($lc_mapping ne '') ? $lc_mapping : $code;
                   $case_map->{upper} = ($uc_mapping ne '') ? $uc_mapping : $code;
               }

            } elsif ($category =~ /^M/) {
                next;

            } elsif ($category =~ /^N/) {
                push @$char_classes, NUMBR;

                if ($category eq "Nd") {
                    push @$char_classes, DIGIT;
                    push @$char_classes, INTGR;
                    $value = $digit_value;
                } else {
                    if ($num_value ne '') {
                        $value = $compartment->reval($num_value);
                    } else {
                        push @$char_classes, INTGR;
                        $value = int($dec_value);
                    }
                }
            } elsif ($category =~ /^P/) {
                push @$char_classes, PUNCT;

            } elsif ($category =~ /^S/) {
                push @$char_classes, SYMBL;

                if ($bidi_class =~ /^ON$/) {
                    # (W)hite(S)pace, (S)pace, or (B)lank
                    push @$char_classes, PUNCT;
                }

                if ($category eq "Sm") {
                    push @$char_classes, MATHS;
                } elsif ($category eq "Sc") {
                    push @$char_classes, CRNCY;
                }
            }
        }

        my $entry = {
            category => $category,
            range => {
                start => $code,
                end => $code,
            },
            classes => {
                parsing => $char_classes,
                combining => int($comb_class),
            },
            value => $value,
            case_map => $case_map,
            bidi => {
                class => $bidi_class,
                mirrored => ($bidi_mirrored eq "Y") ? 1 : 0,
            },
            decomp => ($decomp_map ne '') ? $decomp_map : undef,
        };

        push @$ucd, $entry;
        $last_entry = $entry;
    }
}
close $fh;

cleanup();

my $parse_classes = {};
my $case_maps = {
    upper => {},
    lower => {},
    title => {},
};
my $value_maps = {
    integer => {},
    double => {},
};

for my $entry (@$ucd) {
    my @range = ($entry->{range}{start}..$entry->{range}{end});

    for my $char_class (@{$entry->{classes}{parsing}}) {

        if (!defined $parse_classes->{$char_class}) {
            $parse_classes->{$char_class} = [];
        }

        push @{$parse_classes->{$char_class}}, @range;
    }

    for my $case (qw(upper lower title)) {
        if (defined $entry->{case_map}{$case}) {
            for my $code (@range) {
                $case_maps->{$case}->{$code} = $entry->{case_map}{$case};
            }
        }
    }

    if (defined $entry->{value}) {
        if ($entry->{value} =~ /^-?\d+\z/) {
            for my $code (@range) {
                $value_maps->{integer}{$code} = $entry->{value};
            }
        } else {
            for my $code (@range) {
                $value_maps->{double}{$code} = $entry->{value};
            }
        }
    }
}

open my $c_file, '>', 'src/ucd.c';
open my $header_file, '>', 'src/ucd.h';
    print $c_file "/*\n";
    print $header_file "/*\n";

    open my $license_file, '<', 'LICENSE';
    while (my $line = <$license_file>) {
        print $c_file $line;
        print $header_file $line;
    }
    close $license_file;

    print $c_file "*/\n\n";
    print $header_file "*/\n\n";

    print $c_file "/* Automatically generated by bin/parse_ucd */\n\n";
    print $header_file "/* Automatically generated by bin/parse_ucd */\n\n";

    print $c_file "#include <utf/utf.h>\n\n";
    print $c_file "#include \"ucd.h\"\n\n";

    print $header_file "#ifndef UTF_UCD_H\n";
    print $header_file "#define UTF_UCD_H\n\n";
    print $header_file "#include <utf/utf.h>\n\n";

    for my $parse_class (sort keys %$parse_classes) {
        my $num_runes = scalar @{$parse_classes->{$parse_class}};

        print $c_file "const utf_rune utf_ucd_${parse_class}" . "[$num_runes] = {";
        print $header_file "extern const utf_rune utf_ucd_${parse_class}" . "[$num_runes];\n";

        my $index = 0;
        for my $code (@{$parse_classes->{$parse_class}}) {
            if (($index % 10) == 0) {
                print $c_file "\n    ";
            }
            print $c_file "${code}, ";
            $index += 1;
        }

        print $c_file "\n};\n\n";
    }

    print $header_file "\n#endif /* UTF_UCD_H */\n\n";
close $header_file;
close $c_file

__END__

=pod

=head1 SCRIPT NAME

parse_ucd

=head1 SYNOPSIS

parse_ucd [-t <TEMP_DIR>] -v <VERSION>

=head1 DESCRIPTION

This script downloads the UTF Character Database (UCD) version specified and
parses it to discover the ranges of certain character types (numeric, control,
etc.) and output C functions which identify them. This script will overwrite
C<$PWD/src/ucd.c>, and C<$PWD/src/ucd.h>, so be careful when using it!
=cut
